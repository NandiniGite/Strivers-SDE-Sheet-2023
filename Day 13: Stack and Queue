1) Implement stack using array

class Stack {
  int size;
  int * arr;
  int top;
  public:
    Stack() {
      top = -1;
      size = 1000;
      arr = new int[size];
    }
  void push(int x) {
    top++;
    arr[top] = x;
  }
  int pop() {
    int x = arr[top];
    top--;
    return x;
  }
  int Top() {
    return arr[top];
  }
  int Size() {
    return top + 1;
  }
};

2) Implementation of queue using array

class Queue {
  int * arr;
  int start, end, currSize, maxSize;
  public:
    Queue() {
      arr = new int[16];
      start = -1;
      end = -1;
      currSize = 0;
    }

  Queue(int maxSize) {
    ( * this).maxSize = maxSize;
    arr = new int[maxSize];
    start = -1;
    end = -1;
    currSize = 0;
  }
  void push(int newElement) {
    if (currSize == maxSize) {
      cout << "Queue is full\nExiting..." << endl;
      exit(1);
    }
    if (end == -1) {
      start = 0;
      end = 0;
    } else
      end = (end + 1) % maxSize;
    arr[end] = newElement;
    cout << "The element pushed is " << newElement << endl;
    currSize++;
  }
  int pop() {
    if (start == -1) {
      cout << "Queue Empty\nExiting..." << endl;
    }
    int popped = arr[start];
    if (currSize == 1) {
      start = -1;
      end = -1;
    } else
      start = (start + 1) % maxSize;
    currSize--;
    return popped;
  }
  int top() {
    if (start == -1) {
      cout << "Queue is Empty" << endl;
      exit(1);
    }
    return arr[start];
  }
  int size() {
    return currSize;
  }


3)  Implement stack using queue

class MyStack {
public:
queue<int> q1,q2;
    MyStack() {
        
    }
    
    void push(int x) {
        q1.push(x);
    }
    
    int pop() {
       while(q1.size()>1){
            q2.push(q1.front());
            q1.pop();
        }
        int ans=q1.front();
        q1.pop();
        while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
        }
        return ans;
    }
    
    int top() {
        while(q1.size()>1){
            q2.push(q1.front());
            q1.pop();
        }
        int ans=q1.front();
        q1.pop();
        q2.push(ans);
        while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
        }
        return ans;
    }
    
    bool empty() {
        if(q1.empty()){
            return true;
        }
        return false;
    }
};


4) Implement Queue using stack

class MyQueue {
public:
stack<int> s1,s2;
    MyQueue() {
        
    }
    
    void push(int x) {
        s1.push(x);
    }
    
    int pop() {
        while(!s1.empty()){
            int d=s1.top();
            s2.push(d);
            s1.pop();
        }
        int r=s2.top();
        s2.pop();
        while(!s2.empty()){
            int k=s2.top();
            s1.push(k);
            s2.pop();
        }
        return r;
        
    }
    
    int peek() {
         while(!s1.empty()){
            int d=s1.top();
            s2.push(d);
            s1.pop();
        }
        int r=s2.top();
        
        while(!s2.empty()){
            int k=s2.top();
            s1.push(k);
            s2.pop();
        }
        return r;
        
    }
    
    bool empty() {

        return s1.size()==0;
        
    }
};

5) Balanced Paranthesis

class Solution {
public:
    
    bool isValid(string s) {
        stack<char> st;
        int flag=-1;
        for(int i=0;i<s.size();i++){
            char ch=s[i];
            if(s[i]=='('|| s[i]=='['|| s[i]=='{'){
                st.push(s[i]);
            }
            else{
               if(!st.empty()){
                   char top = st.top() ;
                    if ((ch == ')' && top == '(') || 
                        (ch == '}' && top == '{') ||
                        (ch == ']' && top == '[')) 
                        {
                            
                            st.pop() ;
                        }
                        else 
                        {
                            return false ; 
                        }
               }
               else{
                   return false;
               }
            }
        }
        if(st.empty()){
            return true;
        }
        else{
            return false;
        }
    }
};

6) Next Greater Element

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mp;
        stack<int> st;
        int n=nums2.size(),m=nums1.size();
        st.push(nums2[n-1]);  // push last element
        for(int i=n-2;i>=0;i--){
            while(!st.empty() && st.top()<=nums2[i]){
                st.pop();
            }
            if(!st.empty()){
                mp[nums2[i]]=st.top();//storing the next greatest element
            }
            st.push(nums2[i]);
        }
        vector<int> res(m,-1);
        for(int i=0;i<m;i++){
            if(mp[nums1[i]]!=0)
                res[i]=mp[nums1[i]];
        }
        return res;
    }
};
