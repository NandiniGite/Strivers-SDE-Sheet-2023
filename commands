// add git file
git init
git add .
git commit -m
continue

//mongodb commands
aggregate
1) group by single field
db.games.aggregate([
  {
    $group: {
      _id: "$genre", // Group by the 'genre' field
      count: { $sum: 1 } // Count the number of documents in each group
    }
  }
])

2) group by multiple fields
db.games.aggregate([
  {
    $group: {
      _id: { genre: "$genre", publisher: "$publisher" }, // Group by both 'genre' and 'publisher'
      count: { $sum: 1 } // Count the number of documents in each group
    }
  }
])
3)group by multiple expressions
db.games.aggregate([
  {
    $group: {
      _id: { year: { $year: "$released" }, genre: "$genre" }, // Group by the year and genre
      count: { $sum: 1 } // Count the number of documents in each group
    }
  }
])
4)group by conditional 
db.games.aggregate([
  {
    $group: {
      _id: {
        highRating: { $cond: { if: { $gte: ["$rating", 90] }, then: true, else: false } },
        genre: "$genre"
      },
      count: { $sum: 1 } // Count the number of documents in each group
    }
  }
])
5) grooup by nested field
db.games.aggregate([
  {
    $group: {
      _id: "$scores.name", // Group by the nested 'scores.name' field
      averageScore: { $avg: "$scores.score" } // Calculate the average score for each group
    }
  }
])
// check password
<script>
        function checkPassword() {
            var password = document.getElementById('passwordInput').value;
            var strengthIndicator = document.getElementById('strengthIndicator');

            // Check for minimum length
            if (password.length < 8) {
                strengthIndicator.textContent = 'Weak (minimum 8 characters)';
                strengthIndicator.className = 'weak';
            } else {
                // Check for at least one digit, one uppercase character, and one special character
                if (/\d/.test(password) && /[A-Z]/.test(password) && /[^A-Za-z0-9]/.test(password)) {
                    strengthIndicator.textContent = 'Strong';
                    strengthIndicator.className = 'strong';
                } else {
                    strengthIndicator.textContent = 'Medium (include at least one digit, one uppercase character, and one special character)';
                    strengthIndicator.className = 'medium';
                }
            }
        }
    </script>

// update cart count 
function addToCart() {
    // Get the existing cart count from local storage
    let cartCount = parseInt(localStorage.getItem('cartCount')) || 0;

    // Increase the cart count by 1
    cartCount += 1;

    // Update the cart count in local storage
    localStorage.setItem('cartCount', cartCount);

    // Update the cart count display
    updateCartCountDisplay();
}

function updateCartCountDisplay() {
    const cartCountContainer = document.getElementById('cartCount');
    const cartCount = parseInt(localStorage.getItem('cartCount')) || 0;

    // Update the cart count display
    cartCountContainer.textContent = cartCount;
}

// Initial update of the cart count display
updateCartCountDisplay();

