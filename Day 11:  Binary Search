1) Nth root of integer


int NthRoot(int n, int m) {
  
    int ans=-1;
  long long int s=1;
   long long int e=m;

   while(s<=e){
      int mid=(s+e)/2;
     long long int x=1;
      for(int i=1;i<=n;i++){
         x=x*mid;
         if(x>m)break;
      }

      if(x==m){
         ans=mid;
         break;
      }
      else if(x>m)e=mid-1;
      else s=mid+1;
      
     

   }
   return ans;

}

2) Matrix Median

int countSmallerthanMid(vector<int>& row,int mid){
    int l=0;
    int high=row.size()-1;
    int md=(l+high)>>1;
   while(l<=high)
   { if(row[md]<=mid){
        l=md+1;
     } else {
       high = md - 1;
     }
   }

  return l;

}


int getMedian(vector<vector<int>> &matrix)
{
   int low=1;
   int high=1e9;
   int n=matrix.size();
   int m=matrix[0].size();

   while(low<=high){
       int mid=(low+high)>>1;
       int count=0;
       for(int i=0;i<n;i++){
           count+=countSmallerthanMid(matrix[i],mid);
        }

        if(count<=(n*m)/2) low=mid+1;
        else high=mid-1;
   }
   return low;
}

3) Find element that appears once in a sorted array

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int ans=nums[0];
        for(int i=1;i<nums.size();i++){
            ans=ans^nums[i];
        }
        return ans;
    }
};

4) Search element in a rotated sorted array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0;
        int high=n-1;
        int ans=-1;

        while(low<=high){
            int mid=(low+high)/2;

            if(nums[mid]==target) ans=mid;

            if(nums[low]<=nums[mid]){
               if(target<=nums[mid] && target>=nums[low]){
                   high=mid-1;
               }
               else{
                   low=mid+1;
               }
            }
            else{
                if(target>=nums[mid] && target<=nums[high]){
                   low=mid+1;
               }
               else{
                   high=mid-1;
               }
            }
        }

        return ans;

    }
};

5) Mid element of two sorted arrays (merged )

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        
        // If nums1 is larger than nums2, swap them to ensure n1 is smaller than n2.
        if (n1 > n2) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int l = 0;
        int r = n1;
        while (l <= r) {
            int mid1 = (l + r) / 2;
            int mid2 = (n1 + n2 + 1) / 2 - mid1;
            
            int maxLeft1 = (mid1 == 0) ? INT_MIN : nums1[mid1-1];
            int minRight1 = (mid1 == n1) ? INT_MAX : nums1[mid1];
            
            int maxLeft2 = (mid2 == 0) ? INT_MIN : nums2[mid2-1];
            int minRight2 = (mid2 == n2) ? INT_MAX : nums2[mid2];
            
            if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
                if ((n1 + n2) % 2 == 0) {
                    return (double)(max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2;
                } else {
                    return (double)max(maxLeft1, maxLeft2);
                }
            } else if (maxLeft1 > minRight2) {
                r = mid1 - 1;
            } else {
                l = mid1 + 1;
            }
        }
        
        return -1;
    }
};

6) Kth element of two sorted arrays

#include<limits.h>

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
   
   if(n>m){
       return ninjaAndLadoos(row2,row1,n,m,k);
   }

   int low=max(0,k-m),high=min(k,n);
    
    while(low<=high){
        int cut1=(low+high)>>1;
        int cut2 =k-cut1;

        int l1=cut1==0? INT_MIN: row1[cut1-1];
        int l2=cut2==0? INT_MIN: row2[cut2-1];
        int r1=cut1==m? INT_MAX: row1[cut1];
        int r2=cut2==n? INT_MAX: row2[cut2];

        if(l1<=r2 && l2<=r1){
            return max(l1,l2);
        }
        else if(l1>r2){
            high=cut1-1;
        }
        else{ low=cut1+1;}

    }

    return 1;

}

7) Allocate minimum number of pages to students

#include<bits/stdc++.h>

using namespace std;
//to check if allocation of books among given students is possible.
int isPossible(vector < int > & A, int pages, int students) {
  int cnt = 0;
  int sumAllocated = 0;
  for (int i = 0; i < A.size(); i++) {
    if (sumAllocated + A[i] > pages) {
      cnt++;
      sumAllocated = A[i];
      if (sumAllocated > pages) return false;
    } else {
      sumAllocated += A[i];
    }
  }
  if (cnt < students) return true;
  return false;
}
int books(vector < int > & A, int B) {
  if (B > A.size()) return -1;
  int low = A[0];
  int high = 0;
  //to find minimum value and sum of all pages
  for (int i = 0; i < A.size(); i++) {
    high = high + A[i];
    low = min(low, A[i]);
  }
  //binary search
  while (low <= high) {
    int mid = (low + high) >> 1;
    if (isPossible(A, mid, B)) {
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  return low;
}



