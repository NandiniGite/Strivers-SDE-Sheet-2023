1) Nth root of integer


int NthRoot(int n, int m) {
  
    int ans=-1;
  long long int s=1;
   long long int e=m;

   while(s<=e){
      int mid=(s+e)/2;
     long long int x=1;
      for(int i=1;i<=n;i++){
         x=x*mid;
         if(x>m)break;
      }

      if(x==m){
         ans=mid;
         break;
      }
      else if(x>m)e=mid-1;
      else s=mid+1;
      
     

   }
   return ans;

}

2) Matrix Median

int countSmallerthanMid(vector<int>& row,int mid){
    int l=0;
    int high=row.size()-1;
    int md=(l+high)>>1;
   while(l<=high)
   { if(row[md]<=mid){
        l=md+1;
     } else {
       high = md - 1;
     }
   }

  return l;

}


int getMedian(vector<vector<int>> &matrix)
{
   int low=1;
   int high=1e9;
   int n=matrix.size();
   int m=matrix[0].size();

   while(low<=high){
       int mid=(low+high)>>1;
       int count=0;
       for(int i=0;i<n;i++){
           count+=countSmallerthanMid(matrix[i],mid);
        }

        if(count<=(n*m)/2) low=mid+1;
        else high=mid-1;
   }
   return low;
}

3) Find element that appears once in a sorted array

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int ans=nums[0];
        for(int i=1;i<nums.size();i++){
            ans=ans^nums[i];
        }
        return ans;
    }
};




