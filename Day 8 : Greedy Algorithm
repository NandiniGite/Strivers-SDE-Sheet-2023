1)  N meeting in One Room 

#include <bits/stdc++.h>

using namespace std;

struct meet {
    int start;
    int end;
    int pos;
};

bool static comparator(struct meet m1, meet m2) {
    if (m1.end < m2.end)
        return true;
    else if (m1.end > m2.end)
        return false;
    else if (m1.pos < m2.pos)
        return true;
    else
        return false;
}

vector<int> maximumMeetings(vector<int>& start, vector<int>& end) {
    int n = start.size();
    struct meet m[n];

    for (int i = 0; i < n; i++) {
        m[i].start = start[i];
        m[i].end = end[i];
        m[i].pos = i + 1;
    }

    sort(m, m + n, comparator);

    vector<int> answer;

    int limit = m[0].end;
    answer.push_back(m[0].pos);

    for (int i = 1; i < n; i++) {
        if (m[i].start > limit) {
            answer.push_back(m[i].pos);
            limit = m[i].end;
        }
    }

    return answer;
}

2) Minimum number of platforms required

int calculateMinPatforms(int at[], int dt[], int n) {
    // Write your code here.
    sort(at,at+n);
    sort(dt,dt+n);
    int i=1,j=0;
    int count=1,ans=1;
    while(i<n && j<n){
        if(dt[j]>=at[i]){
          i++;
          count++;
        }
        else{
           
            j++;
            count--;
        }

        ans=max(ans,count);
    }

    return ans;
}

3) Job Scheduling 

#include <bits/stdc++.h> 
using namespace std;
struct job{
    int dead;
    int profit;
};
bool comparator(struct job a,job b){
    return (a.profit>b.profit);
}
int jobScheduling(vector<vector<int>> &jobs)
{
    
    int n=jobs.size();
    struct job j[n];
    for(int i=0;i<n;i++){
      j[i].dead=jobs[i][0];
      j[i].profit=jobs[i][1];
    }

    sort(j,j+n,comparator);

    int maxi=j[0].dead;

    for(int i=0;i<n;i++){
        maxi=max(maxi,j[i].dead);
    }
    int arr[maxi+1];
    int count=0;

    for(int i=0;i<=maxi;i++)arr[i]=-1;

    for(int i=0;i<n;i++){
        for(int k=j[i].dead;k>0;k--){
            if(arr[k]==-1){
               count+=j[i].profit;
               arr[k]=i;
               break;
            }
        }
    }

    return count;
}




