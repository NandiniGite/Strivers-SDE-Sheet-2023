1) Reverse Pairs
class Solution {
private: 
    void merge(vector<int>& nums, int low, int mid, int high, int& reversePairsCount){
        int j = mid+1;
        for(int i=low; i<=mid; i++){
            while(j<=high && nums[i] > 2*(long long)nums[j]){
                j++;
            }
            reversePairsCount += j-(mid+1);
        }
        int size = high-low+1;
        vector<int> temp(size, 0);
        int left = low, right = mid+1, k=0;
        while(left<=mid && right<=high){
            if(nums[left] < nums[right]){
                temp[k++] = nums[left++];
            }
            else{
                temp[k++] = nums[right++];
            }
        }
        while(left<=mid){
            temp[k++] = nums[left++]; 
        }
        while(right<=high){
            temp[k++] = nums[right++]; 
        }
        int m=0;
        for(int i=low; i<=high; i++){
            nums[i] = temp[m++];
        }
    }

    void mergeSort(vector<int>& nums, int low, int high, int& reversePairsCount){
        if(low >= high){
            return;
        }
        int mid = (low + high) >> 1;
        mergeSort(nums, low, mid, reversePairsCount);
        mergeSort(nums, mid+1, high, reversePairsCount);
        merge(nums, low, mid, high, reversePairsCount);
    }
public:
    int reversePairs(vector<int>& nums) {
        int reversePairsCount = 0;
        mergeSort(nums, 0, nums.size()-1, reversePairsCount);
        return reversePairsCount;
    }
};

2) Search in 2D Matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {

        if(matrix.size()==0) return false;

        int n=matrix.size();
        int m=matrix[0].size();
        int low=0;
        int high=(n*m)-1;

        while(low<=high){
            int mid=(low+(high-low)/2);

            if(matrix[mid/m][mid%m]==target){
                return true;
            }
            else if(matrix[mid/m][mid%m]<target){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }

        return false;
    }
};

3) POW(x,n)

class Solution {
public:
    double myPow(double x, int n) {
        double ans=1.0;
        long long k=n;
         
         if(k<0) k=k*(-1);

         while(k){
             if(k%2){
                 ans=ans*x;
                 k=k-1;

             }
             else{
                 x=x*x;
                 k=k/2;
             }
         }

         if(n<0) ans=(double)(1.0)/(double)(ans);

         return ans;
    }
};

4) Majority Element (>n/3)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        

        int ele1 ,ele2;
        int count1 =0;
        int count2 =0;
        for(int i=0;i<nums.size();i++){
            if(count1 ==0 && ele2!=nums[i]){
                ele1=nums[i];
                count1=1;
            }
           else  if(count2 ==0 && ele1!=nums[i]){
                ele2=nums[i];
                count2=1;
            }
            else if(nums[i]==ele1){
                count1++;
            }
            else if(nums[i]==ele2){
                count2++;
            }
            else{
                count1--;
                count2--;
            }
        }
        count1=0,  count2=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==ele1)count1++;
            if(nums[i]==ele2)count2++;
        }
        
        vector<int> ans;
        int min=(int)(nums.size()/3)+1;
        if(count1>=min)ans.push_back(ele1);
        if(count2>=min)ans.push_back(ele2);
       
       return ans;
   
    }
};

5) Majority Element >n/2

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int ans;
        int count =0;
        for(int i=0;i<nums.size();i++){
            if(count ==0){
                ans=nums[i];
                count=1;
            }
            else if(nums[i]==ans){
                count++;
            }
            else{
                count--;
            }
        }
        int cnt=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==ans){
                cnt++;
            }
        }

        if(cnt>(nums.size()/2))
        return ans;

        return -1;

    }
};

6) Grid unique path

class Solution {
public:

    int countPaths(int i,int j,int m,int n,vector<vector<int>> &dp){
        if(i==(m-1)&& j==(n-1))return 1;
        if(i>=m || j>=n) return 0;

        if(dp[i][j]!=-1) return dp[i][j];
        else return dp[i][j]=countPaths(i+1,j,m,n,dp)+countPaths(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
       vector<vector<int>> ans;
       int k= countPaths(0,0,m,n,ans);
       return k;
    }
};
