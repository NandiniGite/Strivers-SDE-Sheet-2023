1) Two Sum Problem

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map <int,int> mp;
        for(int i=0;i<nums.size();i++){
            int a=nums[i];
            int t= target-a;
            if(mp.find(t)!=mp.end()){
              return { mp[t],i};
            }
            mp[a]=i;
        }
        return {0,0};
    }
   
};

2) 4 Sum Problem

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
     
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        int n=nums.size();

        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n;j++){
                if(j!=(i+1) && nums[j]==nums[j-1]) continue;
                int k=j+1;
                int l=n-1;
                while(k<l){
                    long long sum=nums[i];
                    sum+= nums[j];
                    sum+= nums[k];
                    sum+= nums[l];
                    if(sum==target){
                      vector<int> temp={nums[i],nums[j],nums[k],nums[l]};
                      ans.push_back(temp);
                      k++;
                      l--;
                      while(k<l && nums[k]==nums[k-1]) k++;
                    while(k<l && nums[l]==nums[l+1]) l--;
                    }
                    else if(sum<target) k++;
                    else l--;

                }
            }
        }

        return ans;
    }
};

3) Largest Consecutive Number

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0)return 0;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int lastsmaller=INT_MIN;
        int count =0;
        int longest=1;
        for(int i=0;i<n;i++){
            if(nums[i]-1==lastsmaller){
                count +=1;
                lastsmaller=nums[i];
            }
            else if(lastsmaller!=nums[i]){
                count =1;
                lastsmaller=nums[i];
            }

            longest=max(longest,count);
            
        }
        return longest;
    }
};

4) Largest subarray with k sum



//Using Hash Map 


#include <bits/stdc++.h>



int LongestSubsetWithZeroSum(vector < int > arr) {

 
  int k=0;
  map<long long,int> mp;
  long long sum=0;
  int maxLength=0;

  for(int i=0;i<arr.size();i++){
    sum+=arr[i];
    if(sum==k){
      maxLength=max(maxLength,i+1);
          }
     long long rem=sum-k;

     if(mp.find(rem)!=mp.end()){
       int len=i-mp[rem]; 
       maxLength=max(maxLength,len);
     }
     if(mp.find(sum)==mp.end()){
       mp[sum]=i;
     }

  }

return maxLength;

}

// Using two pointer 
int LongestSubsetWithZeroSum(vector < int > arr, int long long k ){
int left=0;
int right =0;
long long sum=a[0];
int n=arr.size();
while(right<n){

while(left<=right && sum>k){
sum-=arr[left];
left++;
}

if(sum==k)maxLen=max(maxLen,right-left+1);
right++;
if(right<n) sum+=a[right];
}
return maxLen;

)

5) Count number of Subarrays with xor k

int subarray(vector<int> a, int k){
int xr=0;
map<int,int> mp;
mp[xr]++;
int cnt=0;

for(int i=0;i<a.size();i++
{
xr=xr^a[i];
int x=xr^k;
cnt+=mp[x];
mp[xr]++;
}
return cnt;
}

6) Longest Substring without repeat

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.length()==0)return 0;   //if string of length zero comes simply return 0
        unordered_map<char,int> m;   //create map to store frequency,(get to know all unique characters
        int i=0,j=0,ans=INT_MIN; 
        while(j<s.length())   
        {
            m[s[j]]++;  //increase the frequency of the element as you traverse the string
            if(m.size()==j-i+1)  // whem map size is equal to the window size means suppose window size is 3 and map size is also three that means in map all unique characters are their
            {
                ans = max(ans,j-i+1);  //compare the length of the maximum window size
            }
            else if(m.size()<j-i+1)   //if the map size is less than the window size means there is some duplicate present like window size = 3 and map size = 2 means there is a duplicates
            {
                while(m.size()<j-i+1)  //so till the duplicates are removed completely
                {
                    m[s[i]]--;   //remove the duplicates
                    if(m[s[i]]==0)  //if the frequency becomes zero 
                    {
                        m.erase(s[i]);//delete it completely
                    }
                    i++;  //go for next element 
                }
            }
             j++;  //go for the next element
        }
        return ans;
    }
};


