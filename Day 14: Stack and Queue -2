1) Next Smaller Element

vector<int> nextSmallerElement(vector<int> &arr, int n)
{
    vector<int> ans(n);
   
    for(int i=0;i<n;i++){
      ans[i]=-1;
      
      for(int j=i+1;j<n;j++){
          if(arr[i]>arr[j]){
              ans[i]=arr[j];
              break;
          }
      }
    }

    return ans;
}

8) Stock Span Problem

class StockSpanner {
public:
vector<int> v1;
vector<int>v2;

    StockSpanner() {
        
    }
    
    int next(int price) {
        v1.push_back(price);
        int n=v1.size()-1;

        if(n==0){
            v2.push_back(1);
            return 1;
        }
        int count=0;
        int temp=v1[n];

        for(int i=n;i>0;i--){
            if(temp<v1[i-1] ){break;}
            else{
                count++;

            }
        }

        count+=1;
        v2.push_back(count);
        return count;
    }
};

9) Find the maximum of minimums of every window slide

 /*
    Time Complexity: O(N ^ 3)
    Space complexity: O(1)

    Where 'N' is the number elements present in the given array.
 */

vector<int> maxMinWindow(vector<int> arr, int n) 
{
    // Definition: answer[i] will store the maximum of minimum of every window of size 'i'.
    vector<int> answer(n);
    
	for (int i = 0; i < n; ++i) 
	{
        answer[i] = INT_MIN;
    }

    // Sliding on all possible windows
    for (int i = 0; i < n; ++i) 
	{
        for (int j = i; j < n; ++j) 
		{

            // Start is the starting index of current window
            int start = i;

            //  End is the ending index of current window
            int end = j;

            // Temp will store minimum element for the current window
            int temp = INT_MAX;
            for (int k = start; k <= end; ++k) 
			{
                temp = min(temp, arr[k]);
            }
            
			int length = end - start;

            // Update the answer of current window length
            answer[length] = max(answer[length], temp);
        }
    }

    return answer;
}


10) The Celebrity Problem

/*
    Time complexity: O(N*N)
    Space complexity: O(N)
	
    Where 'N' is the number of people at the party.
*/

int findCelebrity(int n) {

    // Calculating indegree and outdegree of each nodes.
    vector<int> indegree(n), outdegree(n);

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if(knows(i, j)) {
                indegree[j]++;
                outdegree[i]++;
            }
        }
    }

    // Finding Celebrity.
    int celebrity = -1;

    for(int i = 0; i < n; i++) {
        if(indegree[i] == n - 1 && outdegree[i] == 0) {
            celebrity = i;
            break;
        }
    }

    return celebrity;
}
 


