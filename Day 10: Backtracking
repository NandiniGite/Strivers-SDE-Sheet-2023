1) All possible permutations of the given array

class Solution {
public:
    
void Permute(int ind, vector<vector<int>>& ans,vector<int>& nums){
    if(ind==nums.size()){
          ans.push_back(nums);
    }
    for(int i=ind;i<nums.size();i++){
        swap(nums[ind],nums[i]);
        Permute(ind+1,ans,nums);
        swap(nums[ind],nums[i]);
    }
}
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;

        Permute(0,ans,nums);

        return ans;
    }
};


2) N-Queens Problem

class Solution {
public:
   

   void solve(int ind,vector<string>board,vector<vector<string>>& ans,vector<int>&leftrow,vector<int>& upperdiagonal,vector<int> &lowerdiagonal,int n){
       if(ind==n){
          ans.push_back(board);
          return ;
       }

       for(int row=0;row<n;row++){
           if(leftrow[row]==0 && lowerdiagonal[row+ind]==0 && upperdiagonal[n-1+ind-row]==0){
               board[row][ind]='Q';
               leftrow[row]=1;
               lowerdiagonal[row+ind]=1;
               upperdiagonal[n-1+ind-row]=1;

               solve(ind+1,board,ans,leftrow,upperdiagonal,lowerdiagonal,n);

               board[row][ind]='.';
               leftrow[row]=0;
               lowerdiagonal[row+ind]=0;
               upperdiagonal[n-1+ind-row]=0;
           }
       }
   }

    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;

        vector<string> board (n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        vector<int>leftrow(n,0),upperdiagonal(2*n-1,0),lowerdiagonal(2*n-1,0);

        solve(0,board,ans,leftrow,upperdiagonal,lowerdiagonal,n);
         
         return ans;
    }
};

3) Sudoku Solver

class Solution {
public:
    
        bool isValid(vector < vector < char >> & board, int row, int col, char c) {
  for (int i = 0; i < 9; i++) {
    if (board[i][col] == c)
      return false;

    if (board[row][i] == c)
      return false;

    if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
      return false;
  }
  return true;
}

bool solveSudoku(vector < vector < char >> & board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board[0].size(); j++) {
      if (board[i][j] == '.') {
        for (char c = '1'; c <= '9'; c++) {
          if (isValid(board, i, j, c)) {
            board[i][j] = c;

            if (solveSudoku(board))
              return true;
            else
              board[i][j] = '.';
          }
        }

        return false;
      }
    }
  }
  return true;
    }
};
