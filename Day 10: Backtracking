1) All possible permutations of the given array

class Solution {
public:
    
void Permute(int ind, vector<vector<int>>& ans,vector<int>& nums){
    if(ind==nums.size()){
          ans.push_back(nums);
    }
    for(int i=ind;i<nums.size();i++){
        swap(nums[ind],nums[i]);
        Permute(ind+1,ans,nums);
        swap(nums[ind],nums[i]);
    }
}
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;

        Permute(0,ans,nums);

        return ans;
    }
};


2) N-Queens Problem

class Solution {
public:
   

   void solve(int ind,vector<string>board,vector<vector<string>>& ans,vector<int>&leftrow,vector<int>& upperdiagonal,vector<int> &lowerdiagonal,int n){
       if(ind==n){
          ans.push_back(board);
          return ;
       }

       for(int row=0;row<n;row++){
           if(leftrow[row]==0 && lowerdiagonal[row+ind]==0 && upperdiagonal[n-1+ind-row]==0){
               board[row][ind]='Q';
               leftrow[row]=1;
               lowerdiagonal[row+ind]=1;
               upperdiagonal[n-1+ind-row]=1;

               solve(ind+1,board,ans,leftrow,upperdiagonal,lowerdiagonal,n);

               board[row][ind]='.';
               leftrow[row]=0;
               lowerdiagonal[row+ind]=0;
               upperdiagonal[n-1+ind-row]=0;
           }
       }
   }

    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;

        vector<string> board (n);
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i]=s;
        }
        vector<int>leftrow(n,0),upperdiagonal(2*n-1,0),lowerdiagonal(2*n-1,0);

        solve(0,board,ans,leftrow,upperdiagonal,lowerdiagonal,n);
         
         return ans;
    }
};

3) Sudoku Solver

class Solution {
public:
    
        bool isValid(vector < vector < char >> & board, int row, int col, char c) {
  for (int i = 0; i < 9; i++) {
    if (board[i][col] == c)
      return false;

    if (board[row][i] == c)
      return false;

    if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
      return false;
  }
  return true;
}

bool solveSudoku(vector < vector < char >> & board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board[0].size(); j++) {
      if (board[i][j] == '.') {
        for (char c = '1'; c <= '9'; c++) {
          if (isValid(board, i, j, c)) {
            board[i][j] = c;

            if (solveSudoku(board))
              return true;
            else
              board[i][j] = '.';
          }
        }

        return false;
      }
    }
  }
  return true;
    }
};

4) M coloring problem

#include <iostream>
#include <vector>
#include <string>
using namespace std;

bool isSafe(int node, std::vector<int>& color, std::vector<std::vector<int>>& mat, int n, int col) {
    for (int k = 0; k < n; k++) {
        if (k != node && color[k] == col && mat[k][node] == 1) {
            return false;
        }
    }
    return true;
}

bool solve(int node, std::vector<int>& color, int m, int n, std::vector<std::vector<int>>& mat) {
    if (node == n) {
        return true;
    }

    for (int i = 0; i < m; i++) {
        if (isSafe(node, color, mat, n, i)) {
            color[node] = i;
            if (solve(node + 1, color, m, n, mat)) {
                return true;
            }
            color[node] = 0;
        }
    }
    return false;
}

string graphColoring(vector<vector<int>>& mat, int m) {
    std::vector<int> color(m, 0);
    int n = mat.size();
    std::string ans;
    if (solve(0, color, m, n, mat)) {
        ans = "YES";
    } else {
        ans = "NO";
    }
    return ans;
}


6) Rat in a maze

#include <iostream>
#include <vector>

// Function to check if the rat can move to a given position (x, y)
bool isSafe(int x, int y, const std::vector<std::vector<int>>& maze, int N)
{
    // Check if the position is within the maze bounds and not blocked
    return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1);
}

// Function to solve the Rat in a Maze problem
bool solveMazeUtil(int x, int y, std::vector<std::vector<int>>& maze, std::vector<std::vector<int>>& sol, int N)
{
    // Check if the rat has reached the destination
    if (x == N - 1 && y == N - 1)
    {
        sol[x][y] = 1; // Mark the final position as part of the solution
        return true;
    }

    // Check if the current position is valid
    if (isSafe(x, y, maze, N))
    {
        // Mark the current position as part of the solution
        sol[x][y] = 1;

        // Move to the right direction
        if (solveMazeUtil(x, y + 1, maze, sol, N))
            return true;

        // Move to the down direction
        if (solveMazeUtil(x + 1, y, maze, sol, N))
            return true;

        // Move to the left direction
        if (solveMazeUtil(x, y - 1, maze, sol, N))
            return true;

        // Move to the up direction
        if (solveMazeUtil(x - 1, y, maze, sol, N))
            return true;

        // If no movement leads to the solution, backtrack by unmarking the current position
        sol[x][y] = 0;
    }

    return false; // No path found from this position
}

// Function to solve the Rat in a Maze problem and print the solution
void solveMaze(const std::vector<std::vector<int>>& maze, int N)
{
    std::vector<std::vector<int>> sol(N, std::vector<int>(N, 0)); // Initialize the solution matrix

    // Start solving from the top-left corner
    if (solveMazeUtil(0, 0, maze, sol, N))
    {
        // Print the solution
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                std::cout << sol[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
    else
    {
        std::cout << "No solution found!" << std::endl;
    }
}



   

