1) Reversse a Linked List

class Solution {
public:
    ListNode* reverseList(ListNode* head) {

        ListNode* prev=NULL;
        ListNode* curr=head;

        while(curr!=NULL){
            ListNode* fwd=curr->next;
            curr->next=prev;
            prev=curr;
            curr=fwd;

        }

        return prev;
        
    }
};

2) Middle Element of a Linked List 

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* middle= head;
        ListNode* first=head->next;
        while(first!=NULL && first->next!=NULL){
            middle=middle->next;
            first =first->next->next;
}
       if (first!=NULL){
           return middle->next;
}
        else
            return middle;
        
    }
};

3) Merge Sorting two linked lists

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* left, ListNode* right) {
        if(left==NULL)
            return right;
        if(right==NULL)
            return left;
        ListNode* ans=new ListNode(-1);
        ListNode* mptr=ans;
        while(left&&right){
            if(left->val<=right->val){
                mptr->next=left;
                mptr=left;
                left=left->next;
            }
            else
            {
                mptr->next=right;
                mptr=right;
                right=right->next;
            }
        }
        if(left){
            mptr->next=left;
        }
        if(right){
            mptr->next=right;
        }
        return ans->next;
    }
};

4) Remove nth node from back of linked list

class Solution {
public:
    int length(ListNode* head){
        int i=1;
        while(head->next!=NULL){
            i++;
            head=head->next;
        }
        return i;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head==NULL)
        return NULL;
        if(head->next==NULL&&n==1)
        return NULL;
        int l=length(head);
        if(l==n)
        {
            head=head->next;
            return head;
        }
        l=l-n;
        int i=1;
        ListNode* curr=head;
        while(i<l){
            curr=curr->next;
            i++;
        }
        ListNode* temp=curr->next;
        curr->next=curr->next->next;
        temp->next=NULL;
        delete temp;
        return head;
    }
};

5) Sum of digits of two linked lists 

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
      
      ListNode* newList=new ListNode();

      ListNode *ptr=newList;

      int carry=0;

      while(l1|| l2|| carry){

          int sum=0;
          if(l1){
              sum+=l1->val;
              l1=l1->next;

          }
          if(l2){
              sum+=l2->val;
              l1=l2->next;

          
          }

          sum+=carry;

          carry=sum/10;

          ListNode* node=new ListNode(sum%10);
          ptr->next=node;
          ptr=ptr->next;
      }

       return newList->next; 
        
    }
};
