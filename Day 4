1) Two Sum Problem

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map <int,int> mp;
        for(int i=0;i<nums.size();i++){
            int a=nums[i];
            int t= target-a;
            if(mp.find(t)!=mp.end()){
              return { mp[t],i};
            }
            mp[a]=i;
        }
        return {0,0};
    }
   
};

2) 4 Sum Problem

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
     
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        int n=nums.size();

        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<n;j++){
                if(j!=(i+1) && nums[j]==nums[j-1]) continue;
                int k=j+1;
                int l=n-1;
                while(k<l){
                    long long sum=nums[i];
                    sum+= nums[j];
                    sum+= nums[k];
                    sum+= nums[l];
                    if(sum==target){
                      vector<int> temp={nums[i],nums[j],nums[k],nums[l]};
                      ans.push_back(temp);
                      k++;
                      l--;
                      while(k<l && nums[k]==nums[k-1]) k++;
                    while(k<l && nums[l]==nums[l+1]) l--;
                    }
                    else if(sum<target) k++;
                    else l--;

                }
            }
        }

        return ans;
    }
};


