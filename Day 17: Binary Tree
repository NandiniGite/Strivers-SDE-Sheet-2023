1) Inorder Traversal

class Solution {
public:
vector<int> ans;
void inorder(TreeNode* root){
    if(root==NULL){
        return ;
    }
    inorderTraversal(root->left);
       ans.push_back(root->val);
       inorderTraversal(root->right);


}
    vector<int> inorderTraversal(TreeNode* root) {
      inorder(root);
       return ans;
    }
};

2) PreOrder Traversal

class Solution {
public:
vector<int> ans;
    void preorder(TreeNode* root){
        if(root==NULL){
            return ;
        }
        ans.push_back(root->val);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        preorder(root);
        return ans;
    }
};

3) PostOrder Traversal

vector<int>ans;
 void postorder(TreeNode* root){
     if(root==NULL){
         return ;
     }
     postorderTraversal(root->left);
     postorderTraversal(root->right);
     ans.push_back(root->val);
 }
    vector<int> postorderTraversal(TreeNode* root) {
       postorder(root);
       return ans;  
    }
};

4) Moris Inorder Traversal

#include <bits/stdc++.h> 

vector<int> getPreOrderTraversal(TreeNode *root)
{
    // Write your code here.

    vector<int> ans;

    TreeNode * curr=root;
    while(curr!=NULL)
    {if(curr->left==NULL){
        ans.push_back(curr->data);
        curr=curr->right;
    }
    else{
        TreeNode * prev=curr->left;
        while(prev->right && prev->right!=curr){
            prev=prev->right;
        }
        if(prev->right==NULL){
            prev->right=curr;
            curr=curr->left;

        }
        else{
            prev->right=NULL;
            ans.push_back(curr->data);
            curr=curr->right;
        }
    }
}
    return ans;
}

5) Morris PreOrder Traversal

#include <bits/stdc++.h> 
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/
vector<int> getPreOrderTraversal(TreeNode *root)
{
    // Write your code here.

    vector<int> ans;

    TreeNode * curr=root;
    while(curr!=NULL)
    {if(curr->left==NULL){
        ans.push_back(curr->data);
        curr=curr->right;
    }
    else{
        TreeNode * prev=curr->left;
        while(prev->right && prev->right!=curr){
            prev=prev->right;
        }
        if(prev->right==NULL){
            prev->right=curr;
             ans.push_back(curr->data);
            curr=curr->left;

        }
        else{
            prev->right=NULL;
           
            curr=curr->right;
        }
    }
}
    return ans;
}

6) Left Side View

/*
    Time Complexity - O(N)
    Space Complexity - O(N)

    Where N is the number of nodes in the Binary Tree.
*/

//    Function for doing preorder traversal of a binary tree.
void preorderTraversal(TreeNode<int> *root, int level, int &maxLevel, vector<int> &leftView)
{
    if (root == NULL)
    {
        return;
    }

    //    If the current level is greater than the maxlevel then store the current node.
    if (level > maxLevel)
    {
        leftView.push_back(root->data);
        maxLevel = level;
    }

    //    Recur for the left subtree.
    preorderTraversal(root->left, level + 1, maxLevel, leftView);

    //    Recur for the right subtree.
    preorderTraversal(root->right, level + 1, maxLevel, leftView);
}

vector<int> getLeftView(TreeNode<int> *root)
{
    
    //    For storing the left view of the binary tree.
    vector<int> leftView;

    int maxLevel = -1;

    //    Do a preorder traversal of the binary tree.
    preorderTraversal(root, 0, maxLevel, leftView);

    //    Return the left view of the binary tree.
    return leftView;
}

7)
