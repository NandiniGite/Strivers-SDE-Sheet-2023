1 ) Set Matrix Zero 
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        bool firstcol= false;
        int cols=matrix.size();
        int rows=matrix[0].size();
        for(int i=0;i<cols;i++){
            if(matrix[i][0]==0)firstcol=true;
            for(int j=1;j<rows;j++){
                if(matrix[i][j]==0){
                    matrix[0][j]=0;
                    matrix[i][0]=0;
                }
            }
        }
        for(int i=1;i<cols;i++){
            for(int j=1;j<rows;j++){
                if(matrix[0][j]==0 || matrix[i][0]==0){
                    matrix[i][j]=0;
                }
            }
        }
        if(matrix[0][0]==0){
            for(int j=0;j<rows;j++)matrix[0][j]=0;
        }
        if(firstcol){
            for(int i=0;i<cols;i++) matrix[i][0]=0;
        }


    }
};


2)Pascal's Triangle 
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> ans;

        for(int i=0;i<numRows;i++){
            ans.push_back(vector<int>(i+1,1));
        }

        for(int i=2;i<numRows;i++){
            for(int j=1;j<ans[i].size()-1;j++){
                ans[i][j]=ans[i-1][j-1]+ans[i-1][j];
            }
        }
         return ans ;
    }
};



3) Next Permutation  
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
      int n=nums.size(), index=-1;

      for(int i=n-2;i>=0;i--){
          if(nums[i]<nums[i+1]){
             index=i;
             break;
          }
      }  

      for(int i=n-1;i>=index && index!=-1 ;i--){
          if(nums[i]>nums[index]){
              swap(nums[i],nums[index]);
              break;
          }
      } 

      reverse(nums.begin()+index+1,nums.end());
    }
};

4) Kadane's Algorithm 
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size(),sum=0,max=INT_MIN;
        for(int i=0;i<n;i++){
            sum+=nums[i];

            if(sum>max){
                max=sum ;
            }

            if(sum<0){
                sum=0;
            }
        }

        return max;
    }
};

5)Sort an Array of 0's 1's and 2's 

class Solution {
public:
    void sortColors(vector<int>& nums) {
         int n=nums.size();
         int low=0,mid=0,high=n-1;

         while(mid<=high){
             if(nums[mid]==0){
                swap(nums[mid],nums[low]);
                low++;
                mid++;
             }
             else if(nums[mid]==1){
                mid++;
             }
             else{
                 swap(nums[mid],nums[high]);
                 high--;

             }
         }
    }
};

6) Stock Buy and Sell

class Solution {
public:
    int maxProfit(vector<int>& prices) {
      int profit=0;
      int n=prices.size();
      int mint=prices[0];
      for(int i=1;i<n;i++){
          int cost=prices[i]-mint;
          profit=max(cost,profit);

          mint=min(mint,prices[i]);
      }

      return profit;
    }
};
